// 1. 반응형 웹 만들기
    다양한 화면크기의 모바일 기기들이 나옴.
    그 크기에 맞춘 사이즈로 매번 제작하는 것은 매우매우 비효율적 (예전에는 모니터가의 해상도가 거의 동일함.)
    -> 화면 크기에 '반응'해서 요소들을 자동으로 바꾸어 사이트를 구현
    이전에는 JS를 통해서 해야했지만 (자바스크립트에서 화면해상도 측정, 가용해상도 확인, 출력)
    CSS3의 미디어쿼리(@media) 기능을 이용하여 CSS에서 독자적으로 가능해짐.

    -> 컴퍼넌트의 변화 없이 배치를 변경하여 반응하게.

// 2. 뷰포트
    <meta> tag로 뷰포트의 속성과 속성값을 지정
    width 뷰포트 넓이 - device-width or 크기 (기본값:브라우저 기본값)
    height 뷰포트 넓이 - device-height or 크기 (기본값:브라우저 기본값)
    user-scalalbe 확대,축소 가능여부 - yes or no (기본값 yes)
    initial-scale 초기확대,축소한 값 - 1~ 10 (기본값 1)
    (예시) html5 초기 생성시
        <meta name="viewport" content="width=device-width, initial-scale=1.0">

// 3.em rem 차이
    em은 부모요소 따라감
    rem은 안따라감??

// 4. width 100% vs max-width 100%
    사진의 비율보다 창이 커지는 경우
    width 100% -> 창까지 사진이 커짐 -> 화질 깨짐
    max-width 100% -> 사진의 최대크기까지만 사진이 커짐

// 5. object-fit
    이미지나 비디오 등의 크기 조절
    fill : 콘텐츠의 원래비율을 무시하고 전체영역을 채움(기본값) 
    contain : 비율을 유지하면서 요소 전체 영역에 맞출 수 있을만큼 확대. 영억을 모두 채우지 못할 수 있음.
    cover : 비율을 유지하면서 요소 전체영역을 채울만큼 확대. 콘텐츠의 일부가 잘릴 수 있다.
    none : 콘텐츠의 원래 크기 유지
    scale-down : none과 contain 중 컨텐츠 크기가 더 작아지는 값을 취사선택

// 6. 미디어쿼리란?(media queries)
    다양한 화면에 
    @media [only | not] 미디어 유형 [and 조건] * [and 조건]
        only : 미디어쿼리를 지원하지 않는 웹브라우저에서는 미디어 쿼리를 무시하고 실행하지 않음.
        not : not 다음에 지정하는 미디어 유형을 제외. (not TV라면 TV를 제외한 미디어 유형에서만 적용)
        and : 조건을 여러개 연결해서 추가 가능함.
    @media screen and (min-width: 768px) and (max-width: 1439px)

// 7. 미디어 유형의 종류
    all - 모든 미디어 유형에서 사용할 CSS정의 (기본값)
    print - 인쇄장치
    screen - 컴퓨터 스크린, 스마트폰 스크릭
    TV - 음성과 영상이 동시에 출력되는 TV
    aural - 음성 합성 장치(주로 화면을 읽어 소리로 출력해 주는 장치)
    braille - 점자 표시 장치
    handheld - 패드처럼 손에 들고 다니는 장치
    projection - 프로젝터
    tty - 디스플레이 기능이 제한된 장치(해당 장치에는 px 단위 사용 불가)
    embossed - 점자 프린터

// 8. 웹 문서의 가로,세로 속성
    width, height - 웹페이지의 가로, 세로
    min-width, min-height - 최소 가로, 세로
    max-width, min-height - 최대 가로, 세로
        @media screen and (min-width: 768px) and (max-width: 1439px) 
        ->가로너비가 768px ~ 1439px 인 경우 지정하는 화면 스타일

// 9. orientation 화면의 회전속성
    미디어 쿼리에서 orientation 속성을 이용해서 기기의 방향을 확인할 수 있음
    -> 그에 따라 레이아웃 변경 가능
    orientation: portrait 단말기의 세로 모드를 지정
    orientation: landscape 단말기의 가로 모드를 지정(기본값)

// 10. 중단점이란?
    CSS를 적용할 분기점을 중단점(breack point)라고 함.
    대부분 화면의 가로(width)를 기준으로 함.
    모든 기기 반영이 어려우므로 모바일, 태블릿, 데스크톱 정도로 보통 구분함.

// 11. 웹사이트 웹개발환경(F12)에서 element 좌측의 노트북,휴대폰이 겹쳐진 모양을 누르면
    다양한 환경에서 테스트를 해볼 수 있음.

// 12. 미디어쿼리도 link나 @import를 이용해 외장시킬 수 있음.
    <link rel="stylesheet" media="미디어 쿼리 조건" href="CSS 파일 경로">
    @import url(CSS 파일 경로) <미디어 쿼리 조건>

// 13. CSS 내에서 계산 함수 사용가능. 그 외의 함수는 MDN 참고할 것
    가변시 고정 된 padding을 넣거나 할 때 사용할 수 있으므로 반드시 숙지할 것.
        width:calc(100% - 100px);
        ->가로를 화면 전체에서 100px을 뺀 값으로 자동 조정

// 14. forms의 경우 입력을 브라우저마다 호환성의 차이가 있을 수 있기 때문에 꼭 확인하자
    https://html5test.co/

// 15. 'HTML <input> 사용자가 직접 입력할 수 있도록 하는 것.

// 16. <text area>

// 17. <form> tag 안에 작성을 해야 전송이 된다. (정석적인 기본)
    javascript로 전송하는 방법도 있다.

// 18. form 태그
    method - get 적은 양만, 입력한 내용이 그대로 드러남
            post 길이제한 없음, 사용자가 입력한 내용이 드러나지 않음.
    name - 자바스크립트로 폼을 제어할때 사용할 폼의 이름
    action - <form> 태그 안의 내용을 처리해 줄 서버 프로그램을 지정
    target -action 속성에서 지정한 스크립트 파일을 다른창에서 열도록

// 19. 폼 디자인은 하기 링크 참고 할 것. (기성품)
    https://getbootstrap.com/

// 20. 기본 input 디자인이 브라우저마다 다르고 멋도 없어서 잘 안썼으나,
    백엔드 프로그램에 따라 사용처가 생기기도 함.

// 21. input - text
    <input type="text> <input type="password> 를 이용해서 문자열을 받을 수있음.
    로직은 동일하나 password는 입력값이 *****로 나옴

// 22. form 입력 시 regex (백엔드 점검)의 경우 
    노출되지 않아야 하는 경우 유효
    <logic>
    입력 -> 완성(이벤트) -> 백엔드 전송 (form validation : java, node.js)
    -> 프론트 메시징(y/n) -> 프론트 메시징처리(팝업, 여백 메시지 출략)